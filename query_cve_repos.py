import pandas as pd
from py2neo import Graph, SystemGraph
from py2neo import Node, Relationship

from run_query import run_query


def gitquery_stargazers_by_cve_repos(neo4j_graph, repos_df, git_token, limit_stargazers_per_repo_query=1000):
    """
    Connect to  Github GraphQL, query stargazers of CVE repositories, store to Neo4j database
    :param neo4j_graph: py2neo.Graph, represent Neo4j database connection
    :param repos_df: pandas dataframe, stored information of repositories to query, 2 columns: "Owner" and "Repo"
    :param git_token: github personal access token
    :param limit_stargazers_per_repo_query: limited number of stargazer to query from each repository
    :return:
        return nothing
        The queried stargazer will be added to Neo4j dabase
        The error while querying will be added to error_gitquery_stargazers_by_cve_repos.csv
    """
    headers = {'Authorization': 'token ' + git_token}
    query = """
       query {{
           repository(owner:"{0}", name:"{1}") {{
               stargazers(first:100 {2}) {{
                   pageInfo {{
                       endCursor
                       hasNextPage
                       hasPreviousPage
                       startCursor
                   }}
                   edges {{
                       starredAt
                       node {{
                           login
                           location
                           starredRepositories {{
                               totalCount
                           }}
                       }}
                   }}
               }}
           }}
       }}
       """

    count_repo = 0
    count_error = 0
    error_repos = pd.DataFrame(columns=['Owner', 'Repo', 'Error'])
    for index in repos_df.index:
        owner = repos_df.loc[index, 'Owner']
        repo = repos_df.loc[index, 'Repo']

        try:
            # Add new repo
            if (len(neo4j_graph.nodes.match("Repo", name=repo)) == 0):
                tx = neo4j_graph.begin()
                new_repo_node = Node("Repo",  name=repo, type="cve_l0")
                tx.create(new_repo_node)
                tx.commit()
            repo_node = neo4j_graph.nodes.match("Repo", name=repo).first()

            # Query stargazer
            end_cursor = ""  # Start from begining
            count_user = 0
            has_next_page = True
            print(f'Running query for repository "{repo}":')
            while has_next_page and count_user <= limit_stargazers_per_repo_query:  ## LIMIT stargazers
                this_query = query.format(owner, repo, end_cursor)
                result = run_query(this_query, headers)  # Execute the query
                # print(this_query)
                # print(result)
                has_next_page = result['data']['repository']['stargazers']['pageInfo']['hasNextPage']
                end_cursor = result['data']['repository']['stargazers']['pageInfo']['endCursor']
                end_cursor = ', after: "' + end_cursor + '"'
                data = result['data']['repository']['stargazers']['edges']

                users_data = [{
                                'username': item['node']['login'],
                                'location': item['node']['location'],
                                'starred_repo_count': item['node']['starredRepositories']['totalCount']
                             } for item in data]

                tx = neo4j_graph.begin()
                for user in users_data:
                    if (len(neo4j_graph.nodes.match("Person", username=user['username'])) > 0):
                        user_node = neo4j_graph.nodes.match("Person", username=user['username']).first()
                    else:
                        user_node = Node("Person",
                                             username=user['username'],
                                             location=user['location'],
                                             starred_repo_count=user['starred_repo_count']
                                            )
                        tx.create(user_node)

                    user_repo_link = Relationship(user_node, "STARRED", repo_node)
                    tx.create(user_repo_link)
                tx.commit()

                count_user += len(users_data)
                print(str(count_user) + ' users processed.')

            print(f'Repo: "{repo}" done.')
            count_repo += 1
            print(str(count_repo) + ' repos processed.')
            print('')
            print('')

        except Exception as e:
            count_error += 1
            print('Error with repo: ', index, repo)
            print(e)
            print('Number of error so far: ' + str(count_error))
            print('')
            print('')
            # error_repos = error_repos.append(repos_df.iloc[[index]])
            error_repos = error_repos.append({'Owner': owner, 'Repo': repo, 'Error': e}, ignore_index=True)

    error_repos.to_csv("error/error_gitquery_stargazers_by_cve_repos.csv")


def gitquery_l1_repos(neo4j_graph, git_token, limit_users = 5, limit_repos_per_user=10, limit_stargazers_per_repo_query=1000):
    """
    Get users who starred that most number of CVE repositories in Neo4J DB.
    Query all repositories of those users, call them layered 1 (l1) repositories.
    Query the stargazers of those l1 repositories.
    :param neo4j_graph: py2neo.Graph, represent Neo4j database connection
    :param git_token: github personal access token
    :param limit_users: limited number of users(who starred CVE repositories) to query.
    :param limit_repos_per_user: limited number of l1 repository by each users
    :param limit_stargazers_per_repo_query: limited number of stargazers to query from each l1 repository
    :return:
    """

    # Get users who starred that most number of CVE repositories
    users = neoquery_most_cve_starred_users(neo4j_graph, limit_users)

    # Query all repositories of those users,
    print(f'Preparing querying from "{len(users)}" github accounts...')
    gitquery_repos_by_users(neo4j_graph, users, git_token, limit_repos_per_user)

    # Query the stargazers of l1 repos
    pass


def neoquery_most_cve_starred_users(neo4j_graph, limit_users):
    cypher_query = '''
        MATCH (n)-[s:STARRED]->(r:Repo) 
        RETURN n, count(s) AS repos_starred 
        ORDER BY repos_starred desc 
        LIMIT $limit_users_param
    '''
    user_nodes = neo4j_graph.run(cypher_query, parameters={'limit_users_param': limit_users}).data()
    users = [x['n']['username'] for x in user_nodes]
    return users


def gitquery_repos_by_users(neo4j_graph, users, git_token, limit_repos_per_user):
    headers = {'Authorization': 'token ' + git_token}
    query = """
           query {{
               user(login:"{0}") {{
                   repositories(first:100 {1}) {{
                       pageInfo {{
                           endCursor
                           hasNextPage
                           hasPreviousPage
                           startCursor
                       }}
                       edges {{                           
                           node {{
                               name
                           }}
                       }}
                   }}
               }}
           }}
           """
    count_user = 0
    count_error = 0
    errors = pd.DataFrame(columns=['User', 'Error'])
    for user in users:
        try:
            # Query repos from Github GraphQL
            print(f'Running query for user "{user}":')
            user_node = neo4j_graph.nodes.match("Person", username=user).first()
            if not user_node:
                continue

            end_cursor = ""  # Start from begining
            count_repos = 0
            has_next_page = True
            while has_next_page and count_repos <= limit_repos_per_user:
                this_query = query.format(user, end_cursor)
                result = run_query(this_query, headers)  # Execute the query
                # print(this_query)
                # print(result)
                has_next_page = result['data']['user']['repositories']['pageInfo']['hasNextPage']
                end_cursor = result['data']['user']['repositories']['pageInfo']['endCursor']
                end_cursor = ', after: "' + end_cursor + '"'
                data = result['data']['user']['repositories']['edges']

                repos_data = [item['node']['name'].lower() for item in data]

                tx = neo4j_graph.begin()
                for new_repo in repos_data:
                    if (len(neo4j_graph.nodes.match("Repo", name=new_repo)) > 0):
                        repo_node = neo4j_graph.nodes.match("Repo", name=new_repo).first()
                    else:
                        repo_node = Node("Repo", name=new_repo, type="cve_l1")
                        tx.create(repo_node)
                    user_repo_link = Relationship(user_node, "CREATED", repo_node)
                    tx.create(user_repo_link)
                tx.commit()

                count_repos += len(repos_data)
                print(str(count_repos) + ' repos processed.')

            print(f'User: "{user}" done.')
            count_user += 1
            print(str(count_user) + ' users processed.')
            print('')

        except Exception as e:
            count_error += 1
            print('Error with repo: ', user)
            print(e)
            print('Number of error so far: ' + str(count_error))
            print('')
            errors = errors.append({'User': user, 'Error': e}, ignore_index=True)

    errors.to_csv("error/error_gitquery_repos_by_users.csv")


def gitquery_stargazers_by_repos(neo4j_graph, repos, git_token, limit_stargazers_per_repo_query):
    headers = {'Authorization': 'token ' + git_token}
    query = """
       query {{
           repository(owner:"{0}", name:"{1}") {{
               stargazers(first:100 {2}) {{
                   pageInfo {{
                       endCursor
                       hasNextPage
                       hasPreviousPage
                       startCursor
                   }}
                   edges {{
                       starredAt
                       node {{
                           login
                           location
                           starredRepositories {{
                               totalCount
                           }}
                       }}
                   }}
               }}
           }}
       }}
       """

    count_repo = 0
    count_error = 0
    error_repos = pd.DataFrame(columns=['Owner', 'Repo', 'Error'])
    for index in len(repos):
        owner = repos[index]['Owner']
        repo = repos[index]['Repo']

        try:
            # Add new repo
            if (len(neo4j_graph.nodes.match("Repo", name=repo)) == 0):
                tx = neo4j_graph.begin()
                new_repo_node = Node("Repo", name=repo, type="cve_l0")
                tx.create(new_repo_node)
                tx.commit()
            repo_node = neo4j_graph.nodes.match("Repo", name=repo).first()

            # Query stargazer
            end_cursor = ""  # Start from begining
            count_user = 0
            has_next_page = True
            print(f'Running query for repository "{repo}":')
            while has_next_page and count_user <= limit_stargazers_per_repo_query:  ## LIMIT stargazers
                this_query = query.format(owner, repo, end_cursor)
                result = run_query(this_query, headers)  # Execute the query
                # print(this_query)
                # print(result)
                has_next_page = result['data']['repository']['stargazers']['pageInfo']['hasNextPage']
                end_cursor = result['data']['repository']['stargazers']['pageInfo']['endCursor']
                end_cursor = ', after: "' + end_cursor + '"'
                data = result['data']['repository']['stargazers']['edges']

                users_data = [{
                    'username': item['node']['login'],
                    'location': item['node']['location'],
                    'starred_repo_count': item['node']['starredRepositories']['totalCount']
                } for item in data]

                tx = neo4j_graph.begin()
                for user in users_data:
                    if (len(neo4j_graph.nodes.match("Person", username=user['username'])) > 0):
                        user_node = neo4j_graph.nodes.match("Person", username=user['username']).first()
                    else:
                        user_node = Node("Person",
                                         username=user['username'],
                                         location=user['location'],
                                         starred_repo_count=user['starred_repo_count']
                                         )
                        tx.create(user_node)

                    user_repo_link = Relationship(user_node, "STARRED", repo_node)
                    tx.create(user_repo_link)
                tx.commit()

                count_user += len(users_data)
                print(str(count_user) + ' users processed.')

            print(f'Repo: "{repo}" done.')
            count_repo += 1
            print(str(count_repo) + ' repos processed.')
            print('')
            print('')

        except Exception as e:
            print(e)


def expand_l0_network():
    pass

def expand_l1_network():
    pass

def expand_network(from_layer=None):
    pass